Setting up Redis Sentinel with Docker Compose involves creating a `docker-compose.yml` file that defines the services for the Redis master, Redis slaves, and Redis Sentinel instances. Below is an example of a Docker Compose setup for Redis Sentinel.
### Directory Structure
```
redis-sentinel/
├── docker-compose.yml
├── redis-master/
│   └── redis.conf
├── redis-slave/
│   └── redis.conf
└── redis-sentinel/
    └── sentinel.conf
```
### 1. `docker-compose.yml`
```yaml
version: '3.8'
services:
  redis-master:
    image: redis:7.2.5
    container_name: redis-master
    hostname: redis-master
    volumes:
      - ./redis-master/redis.conf:/usr/local/etc/redis/redis.conf
    command: ["redis-server", "/usr/local/etc/redis/redis.conf"]
    ports:
      - "6379:6379"
    networks:
      - redis-network
  redis-slave:
    image: redis:7.2.5
    container_name: redis-slave
    hostname: redis-slave
    volumes:
      - ./redis-slave/redis.conf:/usr/local/etc/redis/redis.conf
    command: ["redis-server", "/usr/local/etc/redis/redis.conf"]
    depends_on:
      - redis-master
    networks:
      - redis-network
  sentinel:
    image: redis:7.2.5
    container_name: redis-sentinel
    hostname: redis-sentinel
    volumes:
      - ./redis-sentinel/sentinel.conf:/usr/local/etc/redis/sentinel.conf
    command: ["redis-sentinel", "/usr/local/etc/redis/sentinel.conf"]
    depends_on:
      - redis-master
    ports:
      - "26379:26379"
    networks:
      - redis-network
networks:
  redis-network:
    driver: bridge
```
### 2. `redis-master/redis.conf`
```conf
port 6379
bind 0.0.0.0
protected-mode no
```
### 3. `redis-slave/redis.conf`
```conf
port 6379
bind 0.0.0.0
protected-mode no
replicaof redis-master 6379
```
### 4. `redis-sentinel/sentinel.conf`
```conf
port 26379
sentinel monitor mymaster redis-master 6379 2
sentinel down-after-milliseconds mymaster 5000
sentinel failover-timeout mymaster 15000
sentinel parallel-syncs mymaster 1
```
### Steps to Set Up and Run
1. **Create Directory Structure**:
   Ensure the directory structure matches the one outlined above.
2. **Create Configuration Files**:
   Create `redis.conf` for the master and slave, and `sentinel.conf` for Sentinel as shown above.
3. **Start the Services**:
   Navigate to the directory containing `docker-compose.yml` and run:
   ```sh
   docker-compose up -d
   ```
4. **Verify Setup**:
   - Check that the Redis master is running:
     ```sh
     docker logs redis-master
     ```
   - Check that the Redis slave is running and connected to the master:
     ```sh
     docker logs redis-slave
     ```
   - Check that the Redis Sentinel is running and monitoring the master:
     ```sh
     docker logs redis-sentinel
     ```
This setup will create a Redis master, a Redis slave, and a Redis Sentinel instance using Docker Compose. You can scale the number of slaves or Sentinel instances by modifying the `docker-compose.yml` file.